# Import the required libraries.
import numpy as np
from randomgen import ChaCha
import socket
import logging

# Declare the Seed_Value challenge upper and lower bounds. These must be consistent with both the server and client.
SEED_VALUE_LOWER_BOUND = 100_000_000_000
SEED_VALUE_UPPER_BOUND = 999_999_999_999

# Declare the server address to connect to.
SERVER_IP_ADDRESS = '127.0.0.1'

# Set up a basic logging system
logging.basicConfig(filename='client.log', level=logging.INFO, format='%(asctime)s [%(levelname)s] - %(message)s')

# Load the seed value and increment stored locally client-side from a text file. In a production system, these would be stored more securely.
with open("seed-increment.txt", 'r') as seed_file:
    seed, seed_increment = seed_file.read().split(' ')

    # Converts both seed and increment to integers.
    seed, seed_increment = int(seed), int(seed_increment)

# Function to connect to the server 'main.py'. Does not return anything.
def connect_to_server(message):

    # Set up a tuple with the server address and port (450 in this case).
    server_address = (SERVER_IP_ADDRESS, 450)

    # Initialise the client socket.
    client_socket = socket.socket()

    # Basic exception handling. Catches errors and logs them.
    try:
        # Connect to the server.
        client_socket.connect(server_address)

        # Send the message with authentication information.
        client_socket.send(message.encode())

        # Recieve a response from the server. Decodes this message (converts it to a string) and log it.
        response = client_socket.recv(128).decode()
        logging.info(f"Server Response: {response}")

        # Also, print the authentication message.
        print(f"Server Response: {response}")

        if response == 'Success!':

            # If the server indicates that authentication is succesful, update the client-side seed increment in 'seed-incrment.txt'.
            with open("seed-increment.txt", 'w') as seed_file:
                seed_file.write(f'{seed} {seed_increment+1}')

    # Exception handling as aforementioned.
    except Exception as exception:
        logging.error(f"Unexpected error: {str(exception)}")

    finally:

        # Log the client exit.
        logging.info("CLient shutting down.")

        # Close the client socket after receiving a server resonse or after an exception is encountered.
        client_socket.close()

# Main function.
def main():

    # Get the user's username and password using 'input'.
    username = input('Enter your username: ')
    password = input('Enter your password: ')

    # Set up the ChaCha generator with the user's seed.
    generator = np.random.Generator(ChaCha(seed=seed, rounds=20))

    # Iterate through the random numbers generated by 'generator' for 'seed_increment' times. This is done to prepare the next number to be compared to the user-transmitted seed_value.
    for i in range(seed_increment):
        generator.integers(SEED_VALUE_LOWER_BOUND, SEED_VALUE_UPPER_BOUND)

    # Generate the seed_value to be added to the message.
    seed_value = generator.integers(SEED_VALUE_LOWER_BOUND, SEED_VALUE_UPPER_BOUND)

    # Prepare the message to be sent to the server in the format 'username/password/seed_value'.
    message = f"{username}/{password}/{seed_value}"

    # Connect to the server and send the message.
    connect_to_server(message)

# Call to main function.
if __name__ == '__main__':
    main()
